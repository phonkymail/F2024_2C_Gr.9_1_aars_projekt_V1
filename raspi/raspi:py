import paho.mqtt.client as mqtt
import base64
import os
from time import sleep
from picamera import PiCamera
from ultra import DistanceSensor
from led import LedRGB
from rpi_ws281x import Color
from motor import ServoMotor

# Define MQTT parameters
broker_address = "192.168.43.144"
port = 1883
topic_rasp = "image"
topic_server = "recognition"
client_id = "raspi"
image_folder = "/home/rav/Desktop/1ars/prove/new/"
os.makedirs(image_folder, exist_ok=True)
# pins
TRIGGER_PIN = 15
ECHO_PIN = 14
SERVO_PIN = 26  
motor = ServoMotor(SERVO_PIN)
#objetcs
sensor_ult = DistanceSensor(TRIGGER_PIN, ECHO_PIN)
led_rgb = LedRGB()

# Global flag to indicate message received
message_received = False
message_payload = ""

# Function to capture images
def capture_images(image_folder, num_images, delay):
    camera = PiCamera()
    camera.resolution = (640, 480)

    print("Capturing images...in 2sec")
    sleep(2)
    for i in range(num_images):
        image_path = os.path.join(image_folder, f"image_{i}.jpg")
        camera.capture(image_path)
        print(f"Captured {image_path}")
        sleep(delay)
    camera.close()

# MQTT on_connect callback
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Connected to MQTT Broker!")
        client.subscribe(topic_server)
    else:
        print(f"Failed to connect, return code {rc}\n")

# MQTT on_message callback
def on_message(client, userdata, msg):
    global message_received, message_payload
    try:
        message = msg.payload.decode()
        print(f"Received message on {msg.topic}: {message}")
        message_received = True
        message_payload = message
    except Exception as e:
        print(f"Error decoding message: {e}")

# Function to encode and publish an image
def publish_image(image_path, client):
    try:
        with open(image_path, "rb") as image_file:
            encoded_image = base64.b64encode(image_file.read()).decode()
        file_name = os.path.basename(image_path)
        payload = f"{file_name}:{encoded_image}"
        client.publish(topic_rasp, payload)
        print(f"Published {file_name} to {topic_rasp}")
    except Exception as e:
        print(f"Error encoding or publishing image: {e}")

# Function to measure distance in a loop
def measure_distance_loop():
    while True:
        distance = sensor_ult.measure_distance()
        print(f"Distance: {distance} cm")
#distace under 80
        if distance < 80:
            led_rgb.set_color(Color(255, 255, 255))  
            led_rgb.set_color(Color(0, 0, 0))  
#distace under 40
        if distance < 40:
            # Capture images
            capture_images(image_folder, 3, 0.5)
            sleep(3) 
            # Create a new MQTT client instance
            client = mqtt.Client(client_id)
            # Assign event callbacks
            client.on_connect = on_connect
            client.on_message = on_message
            # Connect to the MQTT broker
            client.connect(broker_address, port)
            sleep(0.5)
            # Start the MQTT client
            client.loop_start()
            # Publish images
            for file in os.listdir(image_folder):
                image_path = os.path.join(image_folder, file)
                publish_image(image_path, client)
                sleep(0.5)  

            print("Finished publishing images. Waiting for responses...")

            # Wait for a message
            global message_received, message_payload
            message_received = False
            while not message_received:
                sleep(0.1)

            # Process the message
            if message_payload == "no permission":
                led_rgb.set_color(Color(255, 0, 0))  # Red color
            else:
                led_rgb.set_color(Color(0, 255, 0)) # Green color
                motor.move_to_max()
                  
            sleep(15)  # Keep the LED on for 15 seconds and open 
            led_rgb.set_color(Color(0, 0, 0))  # Turn off LED
            motor.move_to_min() #close motor

            client.loop_stop()
            client.disconnect()
#wait for another loop
        sleep(5)  
#main logic encapsul.
def main():
    measure_distance_loop()

if __name__ == "__main__":
    main()
